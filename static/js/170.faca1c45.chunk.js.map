{"version":3,"file":"static/js/170.faca1c45.chunk.js","mappings":"gMAEaA,E,QAAaC,GAAAA,IAAH,2F,SCCVC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,EACTC,aAAc,CACZC,QAAS,OACTC,eAAgB,aAKzB,C,oKCjBYC,EAAeV,EAAAA,GAAAA,GAAH,+GACV,SAAAW,GAAK,OAAIA,EAAMC,MAAMC,UAAUC,CAA1B,IACH,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,YAAYC,MAA5B,IAKTC,EAAgBjB,EAAAA,GAAAA,IAAH,uH,mBC8C1B,EAjDgB,WACd,IAAQkB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfF,GAAS,GACTF,GAAa,GAHE,UAIWK,EAAAA,EAAAA,IAAkBX,GAJ7B,gBAIPY,EAJO,EAIPA,QACRR,EAAWQ,GALI,kDAOfJ,GAAS,GAPM,yBASfF,GAAa,GATE,6EAAH,qDAYhBI,GACD,GAAE,CAACV,KAGF,iCACE,SAACR,EAAD,qBACCW,EAAQU,QACP,2BACGN,GACC,0EACE,KACHF,GAAY,SAACtB,EAAA,EAAD,IAAa,KACzBoB,EAAQW,KAAI,SAAAC,GACX,OACE,+BACE,UAAChB,EAAD,YACE,qCAAagB,EAAOC,WACpB,uBAAID,EAAOE,YAFOF,EAAOG,KAMhC,QAGH,4EAIP,C,mMCnDKC,EAAU,gCACVC,EAAU,mCAEHC,EAAgB,mCAAG,+GAELC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACmBC,IAHd,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAMrBA,GANqB,sCAQtB,IAAIC,MAAJ,MARsB,yDAAH,qDAYhBC,EAAsB,mCAAG,WAAMC,GAAN,kGAEXJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACaC,EADb,iCAC6CM,EAD7C,gCAFW,uBAE1BH,EAF0B,EAE1BA,KAF0B,kBAM3BA,GAN2B,sCAQ5B,IAAIC,MAAJ,MAR4B,yDAAH,sDAYtBG,EAAqB,mCAAG,WAAM3B,GAAN,kGAEVsB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFnB,EADE,oBACiBoB,EADjB,oBAFU,uBAEzBG,EAFyB,EAEzBA,KAFyB,kBAM1BA,GAN0B,sCAQ3B,IAAIC,MAAJ,MAR2B,yDAAH,sDAYrBI,EAAc,mCAAG,WAAM5B,GAAN,kGAEHsB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFnB,EADE,4BACyBoB,EADzB,oBAFG,uBAElBG,EAFkB,EAElBA,KAFkB,kBAMnBA,GANmB,sCAQpB,IAAIC,MAAJ,MARoB,yDAAH,sDAYdb,EAAiB,mCAAG,WAAMX,GAAN,kGAENsB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFnB,EADE,6BAC0BoB,EAD1B,2BAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAMtBA,GANsB,sCAQvB,IAAIC,MAAJ,MARuB,yDAAH,qD","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MovieDetails/Reviews/Reviews.styled.jsx","components/MovieDetails/Reviews/Reviews.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  display: flex;\n  margin-top: 24px;\n  justify-content: center;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderWrap } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n        wrapperStyle={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ReviewHeader = styled.h3`\n  font-size: ${props => props.theme.fontSizes.l};\n  font-weight: ${props => props.theme.fontWeights.medium};\n  text-align: center;\n  margin-bottom: 24px;\n`;\n\nexport const ReviewWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin-bottom: 24px;\n  padding: 0 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/tmdbAPI';\nimport { ReviewWrapper, ReviewHeader } from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n        const { results } = await fetchMovieReviews(movieId);\n        setReviews(results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      <ReviewHeader>Review</ReviewHeader>\n      {reviews.length ? (\n        <div>\n          {error ? (\n            <div>An error occurred, please try again later...</div>\n          ) : null}\n          {isLoading ? <Loader /> : null}\n          {reviews.map(review => {\n            return (\n              <>\n                <ReviewWrapper key={review.id}>\n                  <h3>Author: {review.author}</h3>\n                  <p>{review.content}</p>\n                </ReviewWrapper>\n              </>\n            );\n          })}\n        </div>\n      ) : (\n        <h3>We don't have any reviews for this movie yet.</h3>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '468e3ef92bf536e06364f01be3648edc';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMoviesByQueryName = async query => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\n// My API Key 468e3ef92bf536e06364f01be3648edc\n//Global axios defaults\n\n// axios.defaults.baseURL = `https://api.themoviedb.org/3`;\n// axios.defaults.params = {\n//   api_key: `468e3ef92bf536e06364f01be3648edc`,\n//   include_adult: false,\n// };\n\n// //const { data } - деструктуризація response.data\n\n// export const fetchTrendMovies = async (page = 1, language) => {\n//   try {\n//     const { data } = await axios.get('/trending/movie/day', {\n//       params: {\n//         page,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movies');\n//   }\n// };\n\n// export const fetchMoviesByQueryName = async (\n//   page = 1,\n//   query = '',\n//   language\n// ) => {\n//   try {\n//     const urlParam = query\n//       ? `/search/movie?page=${page}&query=${query}&language=${language}`\n//       : `/movie/upcoming?page=${page}&language=${language}`;\n//     const { data } = await axios.get(urlParam);\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie');\n//   }\n// };\n\n// export const fetchMoviesDetailsById = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie with that name');\n//   }\n// };\n\n// export const fetchMoviesCast = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/credits`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.cast;\n//   } catch (error) {\n//     throw new Error('Sory, there is no cast movie');\n//   }\n// };\n\n// export const fetchMoviesReviews = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/reviews`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.results;\n//   } catch (error) {\n//     throw new Error('Sory, we don`t have any reviews for this movie');\n//   }\n// };\n"],"names":["LoaderWrap","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","wrapperStyle","display","justifyContent","ReviewHeader","props","theme","fontSizes","l","fontWeights","medium","ReviewWrapper","movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","useEffect","getReviews","fetchMovieReviews","results","length","map","review","author","content","id","API_URL","API_KEY","fetchTrendMovies","axios","data","Error","fetchMoviesByQueryName","query","fetchMovieDetailsById","fetchMovieCast"],"sourceRoot":""}