{"version":3,"file":"static/js/591.58d69635.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","pages/MovieDetailsPage/MovieDetailsPage.styled.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  display: flex;\n  margin-top: 24px;\n  justify-content: center;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderWrap } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n        wrapperStyle={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  margin: 24px auto;\n`;\n","import { SectionStyled } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ children }) => {\n  return <SectionStyled>{children}</SectionStyled>;\n};\n\nSection.propTypes = {\n  children: PropTypes.any.isRequired,\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const DetailsWrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding-top: 30px;\n  padding-bottom: 30px;\n`;\n\nexport const DetailsSubwrap = styled.div`\n  max-width: 600px;\n  margin-left: 40px;\n`;\n","import PropTypes from 'prop-types';\n\nimport { DetailsWrap, DetailsSubwrap } from './MovieDetails.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = ({ movie }) => {\n  const {\n    original_title,\n    release_date,\n    poster_path,\n    vote_average,\n    overview,\n    genres,\n  } = movie;\n\n  const releaseDate = new Date(release_date);\n\n  const releaseYear = isNaN(releaseDate)\n    ? 'Unknown'\n    : releaseDate.getFullYear();\n\n  const moviePoster = poster_path\n    ? `https://image.tmdb.org/t/p/w400/${poster_path}`\n    : 'https://d994l96tlvogv.cloudfront.net/uploads/film/poster/poster-image-coming-soon-placeholder-no-logo-500-x-740_29046.png';\n\n  const userScore = vote_average\n    ? `${(vote_average * 10).toFixed(0)}%`\n    : 'Not rated yet';\n\n  if (!original_title) {\n    return <Loader />;\n  }\n\n  return (\n    <DetailsWrap>\n      <img src={moviePoster} alt={`${original_title} poster`} width=\"240\" />\n      <DetailsSubwrap>\n        {' '}\n        <h3>\n          {original_title ?? 'Unknown'} ({releaseYear})\n        </h3>\n        <p>Score: {userScore}</p>\n        <h4>Overview</h4>\n        <p>{overview}</p>\n        <h4>Genres</h4>\n        {genres && genres.length > 0 && (\n          <p>{genres.map(genre => genre.name).join(', ')}</p>\n        )}\n      </DetailsSubwrap>\n    </DetailsWrap>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.shape({\n    original_title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string.isRequired })\n    ),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import styled from 'styled-components';\nimport { NavLink, Link } from 'react-router-dom';\n\nexport const StyledLink = styled(NavLink)`\n  display: inline-flex;\n  align-items: center;\n  padding: 8px 16px;\n  border-radius: 4px;\n  color: ${props => props.theme.colors.accent};\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  background: ${props => props.theme.colors.white};\n  :hover,\n  :focus {\n    background: ${props => props.theme.colors.gradientOrange};\n    color: ${props => props.theme.colors.white};\n  }\n`;\n\nexport const ButtonWrap = styled.div`\n  display: flex;\n  gap: 10px;\n  margin: 20px auto;\n  justify-content: center;\n`;\n\nexport const StyledBackLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  margin-left: 28px;\n  color: ${props => props.theme.colors.white};\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  :hover {\n    color: ${props => props.theme.colors.accent};\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMovieDetailsById } from 'services/tmdbAPI';\nimport Section from 'components/Section/Section';\nimport MovieDetails from 'components/MovieDetails/MovieDetails';\nimport {\n  StyledLink,\n  ButtonWrap,\n  StyledBackLink,\n} from './MovieDetailsPage.styled';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Loader } from 'components/Loader/Loader';\nimport { useRef } from 'react';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const [currentMovie, setCurrentMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const backLinkPath = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const getMovieById = async movieId => {\n      try {\n        setError(false);\n        setIsLoading(true);\n\n        const fetchedMovieById = await fetchMovieDetailsById(movieId);\n\n        setCurrentMovie(fetchedMovieById);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieById(movieId);\n  }, [movieId]);\n\n  return (\n    <main>\n      <Section>\n        <StyledBackLink to={backLinkPath.current}>\n          <HiArrowLeft size=\"24\" />\n          Go back\n        </StyledBackLink>\n\n        {error ? <div>An error occurred, please try again later...</div> : null}\n\n        {isLoading ? <Loader /> : <MovieDetails movie={currentMovie} />}\n\n        <ButtonWrap>\n          <StyledLink to=\"cast\">Cast</StyledLink>\n          <StyledLink to=\"reviews\">Reviews</StyledLink>\n        </ButtonWrap>\n        {/* <Suspense fallback={<Loader />}> */}\n        <Outlet />\n        {/* </Suspense> */}\n      </Section>\n    </main>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '468e3ef92bf536e06364f01be3648edc';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMoviesByQueryName = async query => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\n// My API Key 468e3ef92bf536e06364f01be3648edc\n//Global axios defaults\n\n// axios.defaults.baseURL = `https://api.themoviedb.org/3`;\n// axios.defaults.params = {\n//   api_key: `468e3ef92bf536e06364f01be3648edc`,\n//   include_adult: false,\n// };\n\n// //const { data } - деструктуризація response.data\n\n// export const fetchTrendMovies = async (page = 1, language) => {\n//   try {\n//     const { data } = await axios.get('/trending/movie/day', {\n//       params: {\n//         page,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movies');\n//   }\n// };\n\n// export const fetchMoviesByQueryName = async (\n//   page = 1,\n//   query = '',\n//   language\n// ) => {\n//   try {\n//     const urlParam = query\n//       ? `/search/movie?page=${page}&query=${query}&language=${language}`\n//       : `/movie/upcoming?page=${page}&language=${language}`;\n//     const { data } = await axios.get(urlParam);\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie');\n//   }\n// };\n\n// export const fetchMoviesDetailsById = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie with that name');\n//   }\n// };\n\n// export const fetchMoviesCast = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/credits`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.cast;\n//   } catch (error) {\n//     throw new Error('Sory, there is no cast movie');\n//   }\n// };\n\n// export const fetchMoviesReviews = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/reviews`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.results;\n//   } catch (error) {\n//     throw new Error('Sory, we don`t have any reviews for this movie');\n//   }\n// };\n"],"names":["LoaderWrap","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","wrapperStyle","display","justifyContent","SectionStyled","children","DetailsWrap","DetailsSubwrap","movie","original_title","release_date","poster_path","vote_average","overview","genres","releaseDate","Date","releaseYear","isNaN","getFullYear","moviePoster","userScore","toFixed","src","alt","length","map","genre","name","join","StyledLink","NavLink","props","theme","colors","accent","white","gradientOrange","ButtonWrap","StyledBackLink","Link","movieId","useParams","location","useLocation","useState","currentMovie","setCurrentMovie","isLoading","setIsLoading","error","setError","backLinkPath","useRef","state","from","useEffect","getMovieById","fetchMovieDetailsById","fetchedMovieById","Section","to","current","size","API_URL","API_KEY","fetchTrendMovies","axios","data","Error","fetchMoviesByQueryName","query","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}