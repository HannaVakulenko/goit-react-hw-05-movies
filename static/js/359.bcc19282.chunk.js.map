{"version":3,"file":"static/js/359.bcc19282.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MovieDetails/Cast/Cast.styled.jsx","components/MovieDetails/Cast/Cast.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrap = styled.div`\n  display: flex;\n  margin-top: 24px;\n  justify-content: center;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderWrap } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrap>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n        wrapperStyle={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n      />\n    </LoaderWrap>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastHeader = styled.h3`\n  font-size: ${props => props.theme.fontSizes.l};\n  font-weight: ${props => props.theme.fontWeights.medium};\n  text-align: center;\n  margin-bottom: 24px;\n`;\n\nexport const CastWrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 32px;\n  text-align: center;\n`;\n\nexport const ActorCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ActorInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 4px;\n  max-width: 200px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/tmdbAPI';\nimport { CastWrapper, ActorCard, ActorInfo, CastHeader } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getMovieCast = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {error ? <div>An error occurred, please try again later...</div> : null}\n      {isLoading ? <Loader /> : null}\n      {cast.length ? (\n        <div>\n          <CastHeader>Cast</CastHeader>\n\n          <CastWrapper>\n            {cast.map(actor => {\n              return (\n                <ActorCard key={actor.credit_id}>\n                  {actor.profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                      alt={`${actor.name}`}\n                    />\n                  ) : (\n                    <img\n                      src={`https://i.stack.imgur.com/q89AO.jpg`}\n                      alt={`${actor.name} profile`}\n                      width={'200px'}\n                    />\n                  )}\n                  <ActorInfo>\n                    <h4> {actor.name}</h4>\n                    <p>Character: {actor.character}</p>\n                  </ActorInfo>\n                </ActorCard>\n              );\n            })}{' '}\n          </CastWrapper>\n        </div>\n      ) : (\n        <h3>We don't have any information about the cast yet.</h3>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '468e3ef92bf536e06364f01be3648edc';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}trending/movie/day?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMoviesByQueryName = async query => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\n// My API Key 468e3ef92bf536e06364f01be3648edc\n//Global axios defaults\n\n// axios.defaults.baseURL = `https://api.themoviedb.org/3`;\n// axios.defaults.params = {\n//   api_key: `468e3ef92bf536e06364f01be3648edc`,\n//   include_adult: false,\n// };\n\n// //const { data } - деструктуризація response.data\n\n// export const fetchTrendMovies = async (page = 1, language) => {\n//   try {\n//     const { data } = await axios.get('/trending/movie/day', {\n//       params: {\n//         page,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movies');\n//   }\n// };\n\n// export const fetchMoviesByQueryName = async (\n//   page = 1,\n//   query = '',\n//   language\n// ) => {\n//   try {\n//     const urlParam = query\n//       ? `/search/movie?page=${page}&query=${query}&language=${language}`\n//       : `/movie/upcoming?page=${page}&language=${language}`;\n//     const { data } = await axios.get(urlParam);\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie');\n//   }\n// };\n\n// export const fetchMoviesDetailsById = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data;\n//   } catch (error) {\n//     throw new Error('Sory, there is no movie with that name');\n//   }\n// };\n\n// export const fetchMoviesCast = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/credits`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.cast;\n//   } catch (error) {\n//     throw new Error('Sory, there is no cast movie');\n//   }\n// };\n\n// export const fetchMoviesReviews = async (movieId, language) => {\n//   try {\n//     const { data } = await axios.get(`movie/${movieId}/reviews`, {\n//       params: {\n//         id: movieId,\n//         language,\n//       },\n//     });\n//     return data.results;\n//   } catch (error) {\n//     throw new Error('Sory, we don`t have any reviews for this movie');\n//   }\n// };\n"],"names":["LoaderWrap","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","wrapperStyle","display","justifyContent","CastHeader","props","theme","fontSizes","l","fontWeights","medium","CastWrapper","ActorCard","ActorInfo","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","useEffect","getMovieCast","fetchMovieCast","length","map","actor","profile_path","src","alt","name","character","credit_id","API_URL","API_KEY","fetchTrendMovies","axios","data","Error","fetchMoviesByQueryName","query","fetchMovieDetailsById","fetchMovieReviews"],"sourceRoot":""}